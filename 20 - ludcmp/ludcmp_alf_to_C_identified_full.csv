Basic Block fabs bb0
bb0;Line;11;"	if (n >= 0){
"
Basic Block fabs bb1
bb1;Line;13;"	}
"
bb1::1:::1;Line;13;"	}
"
Basic Block fabs bb2
bb2;Line;15;"		f = -n;
"
Basic Block fabs bb4
bb4;Line;17;"	return f;
"
Basic Block ludcmp bb0
bb0;Line;55;"	if (n > 99 || eps <= 0.0){
"
Basic Block ludcmp bb1
bb1;Line;55;"	if (n > 99 || eps <= 0.0){
"
Basic Block ludcmp bb3
bb3;Line;56;"		return (999);
"
bb3::0:::1;Line;56;"		return (999);
"
Basic Block ludcmp bb4
bb4;Line;59;"	for (i = 0; i < n; i++) {
"
Basic Block ludcmp bb5
bb5;Line;59;"	for (i = 0; i < n; i++) {
"
Basic Block ludcmp bb7
bb7;Line;60;"		if (fabs(a[i][i]) <= eps){
"
bb7::4;Line;60;"		if (fabs(a[i][i]) <= eps){
"
bb7::6;Line;60;"		if (fabs(a[i][i]) <= eps){
"
Basic Block ludcmp bb14
bb14;Line;61;"			return (1);
"
bb14::0:::1;Line;61;"			return (1);
"
Basic Block ludcmp bb15
bb15;Line;63;"		for (j = i + 1; j <= n; j++) {
"
Basic Block ludcmp bb16
bb16;Line;63;"		for (j = i + 1; j <= n; j++) {
"
bb16::3;Line;63;"		for (j = i + 1; j <= n; j++) {
"
Basic Block ludcmp bb18
bb18;Line;64;"			w = a[j][i];
"
bb18::6;Line;65;"			if (i != 0){
"
bb18::6::ludcmp::bb41;Line;65;"			if (i != 0){
"
bb18::6::ludcmp::bb41:::1;Line;65;"			if (i != 0){
"
Basic Block ludcmp bb24
bb24;Line;66;"				for (k = 0; k < i; k++){
"
bb24::1:::1;Line;66;"				for (k = 0; k < i; k++){
"
Basic Block ludcmp bb25
bb25;Line;66;"				for (k = 0; k < i; k++){
"
Basic Block ludcmp bb27
bb27;Line;68;"				}
"
Basic Block ludcmp bb28
bb28;Line;67;"					w -= a[j][k] * a[k][i];
"
bb28::10;Line;66;"				for (k = 0; k < i; k++){
"
bb28::12;Line;66;"				for (k = 0; k < i; k++){
"
bb28::12:::1;Line;66;"				for (k = 0; k < i; k++){
"
bb28::12:::2;Line;66;"				for (k = 0; k < i; k++){
"
bb28::7;Line;67;"					w -= a[j][k] * a[k][i];
"
bb28::9;Line;67;"					w -= a[j][k] * a[k][i];
"
Basic Block ludcmp bb40
bb40;Line;69;"			}
"
Basic Block ludcmp bb41
bb41;Line;72;"			a[j][i] = w / a[i][i];
"
bb41::9;Line;72;"			a[j][i] = w / a[i][i];
"
Basic Block ludcmp bb50
bb50;Line;63;"		for (j = i + 1; j <= n; j++) {
"
bb50::0:::1;Line;63;"		for (j = i + 1; j <= n; j++) {
"
Basic Block ludcmp bb51
bb51;Line;74;"		for (j = i + 1; j <= n; j++) {
"
Basic Block ludcmp bb52
bb52;Line;74;"		for (j = i + 1; j <= n; j++) {
"
bb52::3;Line;74;"		for (j = i + 1; j <= n; j++) {
"
Basic Block ludcmp bb54
bb54;Line;75;"			w = a[i + 1][j];
"
bb54::7;Line;76;"			for (k = 0; k <= i; k++){
"
bb54::7:::1;Line;76;"			for (k = 0; k <= i; k++){
"
Basic Block ludcmp bb60
bb60;Line;76;"			for (k = 0; k <= i; k++){
"
Basic Block ludcmp bb62
bb62;Line;78;"			}
"
Basic Block ludcmp bb63
bb63;Line;77;"				w -= a[i + 1][k] * a[k][j];
"
bb63::10;Line;77;"				w -= a[i + 1][k] * a[k][j];
"
bb63::11;Line;76;"			for (k = 0; k <= i; k++){
"
bb63::13;Line;76;"			for (k = 0; k <= i; k++){
"
bb63::13:::1;Line;76;"			for (k = 0; k <= i; k++){
"
bb63::13:::2;Line;76;"			for (k = 0; k <= i; k++){
"
bb63::8;Line;77;"				w -= a[i + 1][k] * a[k][j];
"
Basic Block ludcmp bb76
bb76;Line;79;"			a[i + 1][j] = w;
"
Basic Block ludcmp bb81
bb81;Line;74;"		for (j = i + 1; j <= n; j++) {
"
bb81::0:::1;Line;74;"		for (j = i + 1; j <= n; j++) {
"
Basic Block ludcmp bb82
bb82;Line;81;"	}
"
Basic Block ludcmp bb83
bb83;Line;59;"	for (i = 0; i < n; i++) {
"
bb83::2;Line;59;"	for (i = 0; i < n; i++) {
"
bb83::2:::1;Line;59;"	for (i = 0; i < n; i++) {
"
Basic Block ludcmp bb85
bb85;Line;82;"	y[0] = b[0];
"
bb85::2;Line;82;"	y[0] = b[0];
"
bb85::4;Line;83;"	for (i = 1; i <= n; i++) {
"
Basic Block ludcmp bb88
bb88;Line;83;"	for (i = 1; i <= n; i++) {
"
Basic Block ludcmp bb90
bb90;Line;84;"		w = b[i];
"
bb90::5;Line;85;"		for (j = 0; j < i; j++){
"
bb90::5:::1;Line;85;"		for (j = 0; j < i; j++){
"
Basic Block ludcmp bb94
bb94;Line;85;"		for (j = 0; j < i; j++){
"
Basic Block ludcmp bb96
bb96;Line;87;"		}
"
Basic Block ludcmp bb97
bb97;Line;86;"			w -= a[i][j] * y[j];
"
bb97::11;Line;85;"		for (j = 0; j < i; j++){
"
bb97::11:::1;Line;85;"		for (j = 0; j < i; j++){
"
bb97::11:::2;Line;85;"		for (j = 0; j < i; j++){
"
bb97::6;Line;86;"			w -= a[i][j] * y[j];
"
bb97::8;Line;86;"			w -= a[i][j] * y[j];
"
bb97::9;Line;85;"		for (j = 0; j < i; j++){
"
Basic Block ludcmp bb108
bb108;Line;88;"		y[i] = w;
"
Basic Block ludcmp bb111
bb111;Line;83;"	for (i = 1; i <= n; i++) {
"
bb111::2;Line;83;"	for (i = 1; i <= n; i++) {
"
bb111::2:::1;Line;83;"	for (i = 1; i <= n; i++) {
"
Basic Block ludcmp bb113
bb113;Line;90;"	x[n] = y[n] / a[n][n];
"
bb113::10;Line;90;"	x[n] = y[n] / a[n][n];
"
bb113::11;Line;91;"	for (i = n - 1; i >= 0; i--) {
"
bb113::6;Line;90;"	x[n] = y[n] / a[n][n];
"
Basic Block ludcmp bb124
bb124;Line;91;"	for (i = n - 1; i >= 0; i--) {
"
bb124::3;Line;91;"	for (i = n - 1; i >= 0; i--) {
"
Basic Block ludcmp bb126
bb126;Line;92;"		w = y[i];
"
bb126::5;Line;93;"		for (j = i + 1; j <= n; j++){
"
bb126::5:::1;Line;93;"		for (j = i + 1; j <= n; j++){
"
Basic Block ludcmp bb130
bb130;Line;93;"		for (j = i + 1; j <= n; j++){
"
Basic Block ludcmp bb132
bb132;Line;95;"		}
"
Basic Block ludcmp bb133
bb133;Line;94;"			w -= a[i][j] * x[j];
"
bb133::11;Line;93;"		for (j = i + 1; j <= n; j++){
"
bb133::11:::1;Line;93;"		for (j = i + 1; j <= n; j++){
"
bb133::11:::2;Line;93;"		for (j = i + 1; j <= n; j++){
"
bb133::6;Line;94;"			w -= a[i][j] * x[j];
"
bb133::8;Line;94;"			w -= a[i][j] * x[j];
"
bb133::9;Line;93;"		for (j = i + 1; j <= n; j++){
"
Basic Block ludcmp bb144
bb144;Line;96;"		x[i] = w / a[i][i];
"
bb144::7;Line;96;"		x[i] = w / a[i][i];
"
Basic Block ludcmp bb152
bb152;Line;91;"	for (i = n - 1; i >= 0; i--) {
"
bb152::0:::1;Line;91;"	for (i = n - 1; i >= 0; i--) {
"
Basic Block ludcmp bb153
bb153;Line;98;"	return (0);
"
Basic Block ludcmp bb154
bb154;Line;100;"}
"
Basic Block main bb0
bb0;Line;29;"	for (i = 0; i <= n; i++) {
"
Basic Block main bb1
bb1;Line;29;"	for (i = 0; i <= n; i++) {
"
Basic Block main bb2
bb2;Line;31;"		for (j = 0; j <= n; j++) {
"
bb2::2:::1;Line;31;"		for (j = 0; j <= n; j++) {
"
Basic Block main bb3
bb3;Line;31;"		for (j = 0; j <= n; j++) {
"
Basic Block main bb5
bb5;Line;32;"			a[i][j] = (i + 1) + (j + 1);
"
bb5::8;Line;33;"			if (i == j){
"
Basic Block main bb13
bb13;Line;34;"				a[i][j] *= 10.0;
"
bb13::3;Line;34;"				a[i][j] *= 10.0;
"
bb13::5;Line;34;"				a[i][j] *= 10.0;
"
Basic Block main bb19
bb19;Line;38;"		}
"
Basic Block main bb20
bb20;Line;37;"			w += a[i][j];
"
bb20::4;Line;37;"			w += a[i][j];
"
bb20::5;Line;31;"		for (j = 0; j <= n; j++) {
"
bb20::7;Line;31;"		for (j = 0; j <= n; j++) {
"
bb20::7:::1;Line;31;"		for (j = 0; j <= n; j++) {
"
bb20::7:::2;Line;31;"		for (j = 0; j <= n; j++) {
"
Basic Block main bb27
bb27;Line;39;"		b[i] = w;
"
Basic Block main bb30
bb30;Line;29;"	for (i = 0; i <= n; i++) {
"
bb30::2;Line;29;"	for (i = 0; i <= n; i++) {
"
bb30::2:::1;Line;29;"	for (i = 0; i <= n; i++) {
"
Basic Block main bb32
bb32;Line;42;"	chkerr = ludcmp( /* nmax, */ n, eps);
"
bb32::2;Line;44;"	return 0;
"
