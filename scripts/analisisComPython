echo "Gerando o Bitcode $1.ll"
clang34 -g -gcolumn-info -Wall -emit-llvm -S -o - $1.c | opt -mem2reg -instcombine -instsimplify -instnamer | llvm-dis -o $1.ll
echo "Gerando ALF e arquivo de mapeamento $1.alf and $1.map"
llc $1.ll -march=alf -o=$1.alf -alf-map-file=$1.map
echo "Gerando CFG $1.dot e $1.pdf"
mkdir ./CFG
sweet --input-files=$1.alf --dot-print file=./CFG/$1 g=cfg
dot -Tpdf ./CFG/$1.dot > ./CFG/$1.pdf
echo "Gerando Template para o TDB"
mkdir ./TDB
sweet -i=$1.alf -td o=./TDB/$1.tdb
echo "Gerando Template para o arquivo de anotações"
mkdir ./ANN
sweet -i=$1.alf -at=./ANN/$1.ann
echo "Gerando correspondência entre ALF e C"
python ../../Programas/Python/bb_identifier_completo.py ./$1.map ./$1.c -f -o=.txt > temporario01
python ../../Programas/Python/bb_identifier_completo.py ./$1.map ./$1.c -f -o=.csv > temporario02


echo -e "\nApós preencher o arquivo $1.tdb e criar o arquivo de anotações $1.ann\nVocê pode prosseguir a execução abstrata com o comando abaixo:\n"
echo -e "sweet -i=$1.alf annot=./ANN/$1.ann -ae pu bbc=./TDB/$1.tdb merge=none bbcpaths -do floats=est\n"

echo -e "\nDependendo da complexidade do algoritmo (Se houverem muitas decisões dentro de loops) o tempo da AE pode ficar muito longo. \nNesse caso á preciso usar as tecnicas de Merge. \nDe forma assertiva você pode nesses casos prosseguir a execução abstrata com o comando abaixo:\n"
echo -e "sweet -i=$1.alf annot=./ANN/$1.ann -ae pu bbc=./TDB/$1.tdb merge=all bbcpaths -do floats=est\n"

echo "BB0 BB1 BB2 ;" > WCEP.trace

echo -e "\nApós inserir o WCEP no arquivo WCEP.trace você pode reexecutar a execução abstrata com o comando abaixo e extrair Flow Facts relevantes.\n"
echo -e "sweet -i=$1.alf annot=./ANN/$1.ann -ae pu bbc=./TDB/$1.tdb merge=none bbcpaths rtf=\"WCEP.trace\" ffg=ubns -f -do floats=est\n"

rm $1.ll
rm temporario01
rm temporario02
